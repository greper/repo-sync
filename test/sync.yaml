repo:
  sync-src: # 上游项目1，可以任意命名
    url: "https://gitee.com/handsfree-test/sync-src"      # 仓库地址
    path: "sync-src"                  # submodule保存路径
    branch: "main"                    # 要同步过来的分支
  target: # 你的项目（接受同步项目），可以任意命名
    url: "https://gitee.com/handsfree-test/sync-target"   # 仓库地址
    path: "target"                    # submodule子路径
    branch: "main"                    # 你的代码开发主分支（接受合并的分支）例如dev、main等
    token: ""                         # 仓库token，用于提交PR, 前往 https://github.com/settings/tokens 创建token
    type: gitee                       # 仓库类型，用于提交PR，可选项：[github/gitee/gitea/gitlab]
    auto_merge: true

sync: # 同步配置，可以配置多个同步任务
  task1: # 同步任务1，可以任意命名
    src: # 源仓库
      repo: sync-src                # 源仓库名称，上面repo配置的仓库名称引用
      dir: './'                     # 要同步给target的目录
    target: #目标仓库
      repo: target                  # 目标仓库名称，上面repo配置的仓库名称引用
      dir: 'package/sync-src'       # 接收src同步过来的目录
      allow_reset_to_root: true     # 是否允许重置同步分支到root commit记录，第一次同步时需要找到target.dir是一个空目录的commit，确保后续合并时不会丢失变更，root commit大概率应该是空目录
      remove_dir_before_copy: true  # 复制文件前是否删除target.dir，如果target.dir与src.dir是相同的，保持默认true即可
      branch: 'test_sync'           # 同步分支名称（需要配置一个未被占用的分支名称）
    copy_script: ../../../copy_script.py   # 自定义同步脚本，不配置则整个目录复制，脚本中应定义方法:copy(task: {key,src:{上方配置},target:{上方配置}}, src_dir:str, target_dir:str)

options: #选项
  repo_root: repo          # submodule保存根目录
  push: true               # 同步后是否push
  pull_request: true       # 是否创建pr，需要目标仓库配置token和type
  proxy_fix: true          # 是否将https代理改成http://开头
  use_system_proxy: true   # 是否使用系统代理